# -*- coding: utf-8 -*-
"""Mini Project_Breast Cancer_Dibimbing.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1LWzau6zjWlDIvLXoz7Y-zAJbEqf8DpKd

### **Import Library & Load Dataset**
"""

import pandas as pd
import numpy as np
#untuk melalukan perhitungan numerik
import seaborn as sns
#Library visualisasi data
import matplotlib.pyplot as plt
#Library visualisasi data
from sklearn import datasets
breast_cancer = datasets.load_breast_cancer()

x = breast_cancer.data
y = breast_cancer.target


df_x = pd.DataFrame(x, columns=[breast_cancer.feature_names])
df_y = pd.DataFrame(y, columns =['target'])

df_x

df_y

df = pd.concat([df_x, df_y], axis=1)

df.head()
#df.head berfungsi untuk menampilkan 5 data pertama

df.tail()
#df.tail berfungsi untuk menampilkan 5 data terakhir

df.info()
#Untuk melihat ringkasan dari data

df['target'].unique()
#untuk melihat nilai yang ada dalam kolom target

df.describe()
#Untuk melihat ringkasan data statistik numerik

"""### **Split Dataset**"""

from sklearn.model_selection import train_test_split

# Membagi data menjadi train dan test
X_train, X_test, y_train, y_test = train_test_split(df_x, df_y, test_size=0.2, random_state=42)

"""### **Train The Model**"""

from sklearn.tree import DecisionTreeClassifier

# Membuat dan melatih model Decision Tree
model = DecisionTreeClassifier(random_state=42)
model.fit(X_train, y_train)

"""### **Predict & Evaluate**"""

from sklearn.metrics import accuracy_score, confusion_matrix, classification_report

# 4. Memprediksi dan mengevaluasi
y_pred = Model.predict(X_test)

accuracy = accuracy_score(y_test, y_pred)

print("Laporan Klasifikasi:")
print(f"Akurasi: {accuracy * 100:.2f}%")

y_pred = model.predict(X_test)
print(classification_report(y_test, y_pred))

# Confusion Matrix
cm = confusion_matrix(y_test, y_pred)


plt.figure(figsize=(8, 6))
sns.heatmap(cm, annot=True, fmt="d", cmap="Blues",
            xticklabels=breast_cancer.target_names, yticklabels=breast_cancer.target_names)
plt.xlabel("Prediksi")
plt.ylabel("Aktual")
plt.title("Confusion Matrix")
plt.show()

from sklearn import datasets, linear_model, metrics
digits = datasets.load_digits()
reg = linear_model.LogisticRegression(max_iter=10000, random_state=1)
reg.fit(X_train, y_train)

y_pred = reg.predict(X_test)
print(f"Akurasi logistic regresion : {metrics.accuracy_score(y_test, y_pred)*100:.2f}%")

from sklearn.metrics import accuracy_score, classification_report
print(classification_report(y_test, y_pred, target_names=breast_cancer.target_names))

from sklearn.metrics import confusion_matrix
cm = confusion_matrix(y_test, y_pred)
plt.figure(figsize=(8, 6))
sns.heatmap(cm, annot=True, fmt="d", cmap="Blues", xticklabels=breast_cancer.target_names, yticklabels=breast_cancer.target_names)
plt.xlabel("Prediksi")
plt.ylabel("Aktual")
plt.title("Confusion Matrix")
plt.show()

#Hasil evluasi model
accuracy_dt = accuracy_score(y_test, y_pred)  # kalkulasi akurasi decision tree
accuracy_lr = metrics.accuracy_score(y_test, y_pred)  # kalkulasi akurasi logistic regression


print(f"Akurasi Decision Tree: {accuracy_dt * 100:.2f}%")
print(f"Akurasi Logistic Regression: {accuracy_lr * 100:.2f}%")

df['target'].value_counts()

print(df["target"].value_counts().rename(index={0: "Ganas", 1: "Jinak"}))

"""### **Visualisasi Data**"""

labels = ["Ganas", "Jinak"]
sizes = df["target"].value_counts().values
colors = ["red", "green"]

plt.figure(figsize=(6,6))
plt.pie(sizes, labels=labels, autopct="%1.1f%%", colors=colors, startangle=90)
plt.title("Distribusi Kanker Ganas vs Jinak")
plt.show()